{"version":3,"sources":["firebase.ts","components/Auth.tsx","reducers.ts","components/Translator.tsx","components/WordList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","provider","GoogleAuthProvider","db","SignInStatus","_ref","_ref$user","user","name","photo","react_default","a","createElement","style","lineHeight","src","alt","width","height","borderRadius","verticalAlign","onClick","signOut","then","console","log","catch","error","Auth","_ref2","dispatch","signIn","Auth_SignInStatus","signInWithPopup","result","credential","token","accessToken","displayName","errorCode","code","errorMessage","message","email","reducer","state","action","type","uid","Object","objectSpread","login","baseUrl","Translator","authToken","userId","_useState","useState","_useState2","slicedToArray","text","setText","_useState3","_useState4","translatedText","setTranslatedText","onSubmit","length","fetch","concat","encodeURIComponent","headers","Authorization","res","json","translate","t","join","onKeyPress","ev","which","value","onChange","target","en","ru","collection","add","WordList","words","setWords","useEffect","where","get","response","forEach","doc","push","data","map","i","key","initialState","Boolean","window","location","hostname","match","ReactDOM","render","_useReducer","useReducer","_useReducer2","onAuthStateChanged","photoURL","getIdToken","subscribeStateChange","className","Auth_Auth","Translator_Translator","WordList_WordList","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ef1423cb.chunk.js","sourcesContent":["import * as firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nimport { Dispatch, LoginAction, LogoutAction } from './type';\n\nconst firebaseConfig = {\n  apiKey: 'AIzaSyAtaxChdsXsafnwlDz8L5qbyKopnKMCrno',\n  authDomain: 'memlang.firebaseapp.com',\n  databaseURL: 'https://memlang.firebaseio.com',\n  projectId: 'memlang',\n  storageBucket: '',\n  messagingSenderId: '1041692358779',\n  appId: '1:1041692358779:web:1e84cc9b3cf01527',\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nconst provider = new firebase.auth.GoogleAuthProvider();\n\nexport const login = () => {\n  return firebase\n    .auth()\n    .signInWithPopup(provider)\n    .then((result) => {\n      if (result.credential) {\n        // This gives you a Google Access Token. You can use it to access the Google API.\n        var token = (result.credential as any).accessToken as string;\n        // The signed-in user info.\n        var user = result.user;\n        // ...\n        console.log('signInWithPopup', token, user);\n        if (user) {\n          return user.displayName;\n        }\n      }\n    })\n    .catch(function(error) {\n      // Handle Errors here.\n      var errorCode = error.code;\n      var errorMessage = error.message;\n      // The email of the user's account used.\n      var email = error.email;\n      // The firebase.auth.AuthCredential type that was used.\n      var credential = error.credential;\n      // ...\n      console.log(errorCode, errorMessage, email, credential);\n    });\n};\n\nexport const logout = () => {\n  return firebase\n    .auth()\n    .signOut()\n    .then(() => {\n      console.log('Successful sign out');\n    })\n    .catch((error) => {\n      console.log(error);\n    });\n};\n\nexport const subscribeStateChange = (dispatch: Dispatch) => {\n  firebase.auth().onAuthStateChanged((user) => {\n    if (user) {\n      const { displayName, photoURL, uid } = user;\n      user.getIdToken().then((token) => {\n        const action: LoginAction = {\n          type: 'login',\n          user: {\n            name: displayName || 'anon',\n            photo: photoURL || '',\n            token,\n            uid,\n          },\n        };\n        dispatch(action);\n      });\n    } else {\n      const action: LogoutAction = { type: 'logout' };\n      dispatch(action);\n    }\n  });\n};\n\nconst db = firebase.firestore();\n\nexport const addWord = (en: string, ru: string, user: string) => {\n  db.collection('dictionary').add({\n    en,\n    ru,\n    user,\n  });\n};\n\nexport const getWords = (user: string) => {\n  return db\n    .collection('dictionary')\n    .where('user', '==', user)\n    .get()\n    .then((response) => {\n      const result: any[] = [];\n      response.forEach((doc) => result.push(doc.data()));\n      return result;\n    });\n};\n","import React from 'react';\nimport { login, logout } from '../firebase';\nimport { UserState, Action } from '../type';\n\nexport interface Props {\n  user: UserState;\n  dispatch: React.Dispatch<Action>;\n}\n\nconst SignInStatus = ({ user: { name, photo } }: Props) => {\n  return (\n    <div\n      style={{\n        lineHeight: '30px',\n      }}\n    >\n      <img\n        src={photo}\n        alt={name}\n        style={{\n          width: '30px',\n          height: '30px',\n          borderRadius: '15px',\n          verticalAlign: 'middle',\n        }}\n      />{' '}\n      <span\n        style={{\n          verticalAlign: 'middle',\n        }}\n      >\n        {name}\n      </span>{' '}\n      <button\n        style={{\n          verticalAlign: 'middle',\n        }}\n        onClick={() => logout()}\n      >\n        Logout\n      </button>\n    </div>\n  );\n};\n\nexport const Auth = ({ user, dispatch }: Props) => {\n  return (\n    <div>\n      {!user.signIn ? (\n        <button onClick={() => login()}>Login</button>\n      ) : (\n        <SignInStatus user={user} dispatch={dispatch} />\n      )}\n    </div>\n  );\n};\n","import { State, Action, LoginAction } from './type';\n\nexport function reducer(state: State, action: Action): State {\n  switch (action.type) {\n    case 'login':\n      return login(state, action);\n    case 'logout':\n      return {\n        ...state,\n        user: {\n          signIn: false,\n          name: '',\n          photo: '',\n          token: '',\n          uid: '',\n        },\n      };\n    default:\n      return state;\n  }\n}\n\nfunction login(state: State, { user: { name, photo, token, uid } }: LoginAction): State {\n  return {\n    ...state,\n    user: {\n      signIn: true,\n      name,\n      photo,\n      token,\n      uid,\n    },\n  };\n}\n","import React, { useState } from 'react';\nimport { addWord } from '../firebase';\n\n// const baseUrl = 'http://localhost:5000/memlang/us-central1';\nconst baseUrl = 'https://us-central1-memlang.cloudfunctions.net';\n\nfunction translate(text: string, authToken: string) {\n  return fetch(`${baseUrl}/translate/${encodeURIComponent(text)}`, {\n    headers: {\n      Authorization: `Bearer ${authToken}`,\n    },\n  }).then((res) => res.json());\n}\n\nexport const Translator = ({ authToken, userId }: { authToken: string; userId: string }) => {\n  const [text, setText] = useState('');\n  const [translatedText, setTranslatedText] = useState<string>('');\n\n  const onSubmit = () => {\n    if (text.length > 2 && text.length < 100) {\n      translate(text, authToken).then((t) => setTranslatedText(t.join(', ')));\n    }\n  };\n\n  const onKeyPress = (ev: React.KeyboardEvent<HTMLInputElement>) => {\n    if (ev.which === 13) {\n      onSubmit();\n    }\n  };\n\n  const onTranslateSubmit = () => {\n    if (text.length > 2 && text.length < 100 && translatedText.length > 2 && text.length < 100) {\n      addWord(text, translatedText, userId);\n    }\n  };\n\n  return (\n    <div>\n      <h1>Translator</h1>\n      <div>\n        Source text:{' '}\n        <input\n          type='text'\n          value={text}\n          onChange={(ev) => setText(ev.target.value)}\n          onKeyPress={onKeyPress}\n        />{' '}\n        <button onClick={onSubmit}>Go</button>\n      </div>\n      {translatedText.length > 0 && (\n        <div>\n          <h3>Translation:</h3>\n          <input\n            type='text'\n            value={translatedText}\n            onChange={(ev) => setText(ev.target.value)}\n            onKeyPress={onKeyPress}\n          />\n          <button onClick={onTranslateSubmit}>Save</button>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { getWords } from '../firebase';\n\nexport interface Props {\n  userId: string;\n}\n\nexport const WordList = ({ userId }: Props) => {\n  const [words, setWords] = useState<Array<{ en: string; ru: string }>>([]);\n\n  useEffect(() => {\n    getWords(userId).then((res) => setWords(res));\n  }, [userId]);\n\n  return (\n    <div>\n      <ul>\n        {words.map(({ en, ru }, i) => (\n          <li key={i}>\n            {en} - {ru}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import React, { useReducer, useEffect } from 'react';\nimport './App.css';\nimport { Auth } from './components/Auth';\nimport { State } from './type';\nimport { reducer } from './reducers';\nimport { subscribeStateChange } from './firebase';\nimport { Translator } from './components/Translator';\nimport { WordList } from './components/WordList';\n\nconst initialState: State = {\n  user: {\n    signIn: false,\n    name: '',\n    photo: '',\n    token: '',\n    uid: '',\n  },\n};\n\nexport const App: React.FC = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  useEffect(() => {\n    subscribeStateChange(dispatch);\n  }, []);\n\n  return (\n    <div className='App'>\n      <Auth dispatch={dispatch} user={state.user} />\n      {state.user.signIn && <Translator authToken={state.user.token} userId={state.user.uid} />}\n      {state.user.signIn && <WordList userId={state.user.uid} />}\n    </div>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}