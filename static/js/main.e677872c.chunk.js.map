{"version":3,"sources":["firebase.ts","components/Auth.tsx","reducers.ts","components/Translator.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","provider","GoogleAuthProvider","SignInStatus","_ref","_ref$user","user","name","photo","react_default","a","createElement","style","lineHeight","src","alt","width","height","borderRadius","verticalAlign","onClick","signOut","then","console","log","catch","error","Auth","_ref2","dispatch","signIn","Auth_SignInStatus","signInWithPopup","result","credential","token","accessToken","displayName","errorCode","code","errorMessage","message","email","reducer","state","action","type","Object","objectSpread","login","baseUrl","Translator","authToken","_useState","useState","_useState2","slicedToArray","text","setText","_useState3","_useState4","translations","setTranslations","onSubmit","length","fetch","concat","encodeURIComponent","headers","Authorization","res","json","translate","t","value","onChange","ev","target","onKeyPress","which","map","i","key","initialState","Boolean","window","location","hostname","match","ReactDOM","render","_useReducer","useReducer","_useReducer2","useEffect","onAuthStateChanged","photoURL","getIdToken","subscribeStateChange","className","Auth_Auth","Translator_Translator","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kNAcAA,gBAVuB,CACrBC,OAAQ,0CACRC,WAAY,0BACZC,YAAa,iCACbC,UAAW,UACXC,cAAe,GACfC,kBAAmB,gBACnBC,MAAO,yCAKT,IAAMC,EAAW,IAAIR,OAAcS,mBCP7BC,EAAe,SAAAC,GAAsC,IAAAC,EAAAD,EAAnCE,KAAQC,EAA2BF,EAA3BE,KAAMC,EAAqBH,EAArBG,MACpC,OACEC,EAAAC,EAAAC,cAAA,OACEC,MAAO,CACLC,WAAY,SAGdJ,EAAAC,EAAAC,cAAA,OACEG,IAAKN,EACLO,IAAKR,EACLK,MAAO,CACLI,MAAO,OACPC,OAAQ,OACRC,aAAc,OACdC,cAAe,YAEhB,IACHV,EAAAC,EAAAC,cAAA,QACEC,MAAO,CACLO,cAAe,WAGhBZ,GACK,IACRE,EAAAC,EAAAC,cAAA,UACEC,MAAO,CACLO,cAAe,UAEjBC,QAAS,kBDYR3B,SAEJ4B,UACAC,KAAK,WACJC,QAAQC,IAAI,yBAEbC,MAAM,SAACC,GACNH,QAAQC,IAAIE,OCvBZ,YAYOC,EAAO,SAAAC,GAA+B,IAA5BtB,EAA4BsB,EAA5BtB,KAAMuB,EAAsBD,EAAtBC,SAC3B,OACEpB,EAAAC,EAAAC,cAAA,WACIL,EAAKwB,OAGLrB,EAAAC,EAAAC,cAACoB,EAAD,CAAczB,KAAMA,EAAMuB,SAAUA,IAFpCpB,EAAAC,EAAAC,cAAA,UAAQS,QAAS,kBD9BhB3B,SAEJuC,gBAAgB/B,GAChBqB,KAAK,SAACW,GACL,GAAIA,EAAOC,WAAY,CAErB,IAAIC,EAASF,EAAOC,WAAmBE,YAEnC9B,EAAO2B,EAAO3B,KAGlB,GADAiB,QAAQC,IAAI,kBAAmBW,EAAO7B,GAClCA,EACF,OAAOA,EAAK+B,eAIjBZ,MAAM,SAASC,GAEd,IAAIY,EAAYZ,EAAMa,KAClBC,EAAed,EAAMe,QAErBC,EAAQhB,EAAMgB,MAEdR,EAAaR,EAAMQ,WAEvBX,QAAQC,IAAIc,EAAWE,EAAcE,EAAOR,OCK1C,kBC/CD,SAASS,EAAQC,EAAcC,GACpC,OAAQA,EAAOC,MACb,IAAK,QACH,OAgBN,SAAeF,EAAfxC,GAAmF,IAAAC,EAAAD,EAApDE,KAAQC,EAA4CF,EAA5CE,KAAMC,EAAsCH,EAAtCG,MAAO2B,EAA+B9B,EAA/B8B,MAClD,OAAOY,OAAAC,EAAA,EAAAD,CAAA,GACFH,EADL,CAEEtC,KAAM,CACJwB,QAAQ,EACRvB,OACAC,QACA2B,WAvBOc,CAAML,EAAOC,GACtB,IAAK,SACH,OAAOE,OAAAC,EAAA,EAAAD,CAAA,GACFH,EADL,CAEEtC,KAAM,CACJwB,QAAQ,EACRvB,KAAM,GACNC,MAAO,GACP2B,MAAO,MAGb,QACE,OAAOS,GCdb,IAAMM,EAAU,iDAUT,IAAMC,EAAa,SAAA/C,GAA0C,IAAvCgD,EAAuChD,EAAvCgD,UAAuCC,EAC1CC,mBAAS,IADiCC,EAAAR,OAAAS,EAAA,EAAAT,CAAAM,EAAA,GAC3DI,EAD2DF,EAAA,GACrDG,EADqDH,EAAA,GAAAI,EAE1BL,mBAAmB,IAFOM,EAAAb,OAAAS,EAAA,EAAAT,CAAAY,EAAA,GAE3DE,EAF2DD,EAAA,GAE7CE,EAF6CF,EAAA,GAI5DG,EAAW,WACXN,EAAKO,OAAS,GAAKP,EAAKO,OAAS,KAbzC,SAAmBP,EAAcL,GAC/B,OAAOa,MAAK,GAAAC,OAAIhB,EAAJ,eAAAgB,OAAyBC,mBAAmBV,IAAS,CAC/DW,QAAS,CACPC,cAAa,UAAAH,OAAYd,MAE1B9B,KAAK,SAACgD,GAAD,OAASA,EAAIC,SASjBC,CAAUf,EAAML,GAAW9B,KAAK,SAACmD,GAAD,OAAOX,EAAgBW,MAU3D,OACEhE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,0BACe,IACbF,EAAAC,EAAAC,cAAA,SACEmC,KAAK,OACL4B,MAAOjB,EACPkB,SAAU,SAACC,GAAD,OAAQlB,EAAQkB,EAAGC,OAAOH,QACpCI,WAfW,SAACF,GACD,KAAbA,EAAGG,OACLhB,OAcK,IACHtD,EAAAC,EAAAC,cAAA,UAAQS,QAAS2C,GAAjB,OAEDF,EAAaG,OAAS,GACrBvD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,UACGkD,EAAamB,IAAI,SAACP,EAAGQ,GAAJ,OAChBxE,EAAAC,EAAAC,cAAA,MAAIuE,IAAKD,GAAIR,SCvCrBU,EAAsB,CAC1B7E,KAAM,CACJwB,QAAQ,EACRvB,KAAM,GACNC,MAAO,GACP2B,MAAO,KCDSiD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCXnCC,IAASC,OAAOjF,EAAAC,EAAAC,cFWa,WAAM,IAAAgF,EACPC,qBAAWjD,EAASwC,GADbU,EAAA9C,OAAAS,EAAA,EAAAT,CAAA4C,EAAA,GAC1B/C,EAD0BiD,EAAA,GACnBhE,EADmBgE,EAAA,GAOjC,OAJAC,oBAAU,YJwCwB,SAACjE,GACnCpC,SAAgBsG,mBAAmB,SAACzF,GAClC,GAAIA,EAAM,KACA+B,EAA0B/B,EAA1B+B,YAAa2D,EAAa1F,EAAb0F,SACrB1F,EAAK2F,aAAa3E,KAAK,SAACa,GAStBN,EAR4B,CAC1BiB,KAAM,QACNxC,KAAM,CACJC,KAAM8B,GAAe,OACrB7B,MAAOwF,GAAY,GACnB7D,kBAONN,EAD6B,CAAEiB,KAAM,aIvDvCoD,CAAqBrE,IACpB,IAGDpB,EAAAC,EAAAC,cAAA,OAAKwF,UAAU,OACb1F,EAAAC,EAAAC,cAACyF,EAAD,CAAMvE,SAAUA,EAAUvB,KAAMsC,EAAMtC,OACrCsC,EAAMtC,KAAKwB,QAAUrB,EAAAC,EAAAC,cAAC0F,EAAD,CAAYjD,UAAWR,EAAMtC,KAAK6B,UErB9C,MAASmE,SAASC,eAAe,SD+H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpF,KAAK,SAACqF,GAClCA,EAAaC","file":"static/js/main.e677872c.chunk.js","sourcesContent":["import * as firebase from 'firebase/app';\nimport 'firebase/auth';\nimport { Dispatch, LoginAction, LogoutAction } from './type';\n\nconst firebaseConfig = {\n  apiKey: 'AIzaSyAtaxChdsXsafnwlDz8L5qbyKopnKMCrno',\n  authDomain: 'memlang.firebaseapp.com',\n  databaseURL: 'https://memlang.firebaseio.com',\n  projectId: 'memlang',\n  storageBucket: '',\n  messagingSenderId: '1041692358779',\n  appId: '1:1041692358779:web:1e84cc9b3cf01527',\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nconst provider = new firebase.auth.GoogleAuthProvider();\n\nexport const login = () => {\n  return firebase\n    .auth()\n    .signInWithPopup(provider)\n    .then((result) => {\n      if (result.credential) {\n        // This gives you a Google Access Token. You can use it to access the Google API.\n        var token = (result.credential as any).accessToken as string;\n        // The signed-in user info.\n        var user = result.user;\n        // ...\n        console.log('signInWithPopup', token, user);\n        if (user) {\n          return user.displayName;\n        }\n      }\n    })\n    .catch(function(error) {\n      // Handle Errors here.\n      var errorCode = error.code;\n      var errorMessage = error.message;\n      // The email of the user's account used.\n      var email = error.email;\n      // The firebase.auth.AuthCredential type that was used.\n      var credential = error.credential;\n      // ...\n      console.log(errorCode, errorMessage, email, credential);\n    });\n};\n\nexport const logout = () => {\n  return firebase\n    .auth()\n    .signOut()\n    .then(() => {\n      console.log('Successful sign out');\n    })\n    .catch((error) => {\n      console.log(error);\n    });\n};\n\nexport const subscribeStateChange = (dispatch: Dispatch) => {\n  firebase.auth().onAuthStateChanged((user) => {\n    if (user) {\n      const { displayName, photoURL } = user;\n      user.getIdToken().then((token) => {\n        const action: LoginAction = {\n          type: 'login',\n          user: {\n            name: displayName || 'anon',\n            photo: photoURL || '',\n            token,\n          },\n        };\n        dispatch(action);\n      });\n    } else {\n      const action: LogoutAction = { type: 'logout' };\n      dispatch(action);\n    }\n  });\n};\n","import React from 'react';\nimport { login, logout } from '../firebase';\nimport { UserState, Action } from '../type';\n\nexport interface Props {\n  user: UserState;\n  dispatch: React.Dispatch<Action>;\n}\n\nconst SignInStatus = ({ user: { name, photo } }: Props) => {\n  return (\n    <div\n      style={{\n        lineHeight: '30px',\n      }}\n    >\n      <img\n        src={photo}\n        alt={name}\n        style={{\n          width: '30px',\n          height: '30px',\n          borderRadius: '15px',\n          verticalAlign: 'middle',\n        }}\n      />{' '}\n      <span\n        style={{\n          verticalAlign: 'middle',\n        }}\n      >\n        {name}\n      </span>{' '}\n      <button\n        style={{\n          verticalAlign: 'middle',\n        }}\n        onClick={() => logout()}\n      >\n        Logout\n      </button>\n    </div>\n  );\n};\n\nexport const Auth = ({ user, dispatch }: Props) => {\n  return (\n    <div>\n      {!user.signIn ? (\n        <button onClick={() => login()}>Login</button>\n      ) : (\n        <SignInStatus user={user} dispatch={dispatch} />\n      )}\n    </div>\n  );\n};\n","import { State, Action, LoginAction } from './type';\n\nexport function reducer(state: State, action: Action): State {\n  switch (action.type) {\n    case 'login':\n      return login(state, action);\n    case 'logout':\n      return {\n        ...state,\n        user: {\n          signIn: false,\n          name: '',\n          photo: '',\n          token: '',\n        },\n      };\n    default:\n      return state;\n  }\n}\n\nfunction login(state: State, { user: { name, photo, token } }: LoginAction): State {\n  return {\n    ...state,\n    user: {\n      signIn: true,\n      name,\n      photo,\n      token,\n    },\n  };\n}\n","import React, { useState } from 'react';\n\n// const baseUrl = 'http://localhost:5000/memlang/us-central1';\nconst baseUrl = 'https://us-central1-memlang.cloudfunctions.net';\n\nfunction translate(text: string, authToken: string) {\n  return fetch(`${baseUrl}/translate/${encodeURIComponent(text)}`, {\n    headers: {\n      Authorization: `Bearer ${authToken}`,\n    },\n  }).then((res) => res.json());\n}\n\nexport const Translator = ({ authToken }: { authToken: string }) => {\n  const [text, setText] = useState('');\n  const [translations, setTranslations] = useState<string[]>([]);\n\n  const onSubmit = () => {\n    if (text.length > 2 && text.length < 100) {\n      translate(text, authToken).then((t) => setTranslations(t));\n    }\n  };\n\n  const onKeyPress = (ev: React.KeyboardEvent<HTMLInputElement>) => {\n    if (ev.which === 13) {\n      onSubmit();\n    }\n  };\n\n  return (\n    <div>\n      <h1>Translator</h1>\n      <div>\n        Source text:{' '}\n        <input\n          type='text'\n          value={text}\n          onChange={(ev) => setText(ev.target.value)}\n          onKeyPress={onKeyPress}\n        />{' '}\n        <button onClick={onSubmit}>Go</button>\n      </div>\n      {translations.length > 0 && (\n        <div>\n          <h3>Translations:</h3>\n          <ul>\n            {translations.map((t, i) => (\n              <li key={i}>{t}</li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useReducer, useEffect } from 'react';\nimport './App.css';\nimport { Auth } from './components/Auth';\nimport { State } from './type';\nimport { reducer } from './reducers';\nimport { subscribeStateChange } from './firebase';\nimport { Translator } from './components/Translator';\n\nconst initialState: State = {\n  user: {\n    signIn: false,\n    name: '',\n    photo: '',\n    token: '',\n  },\n};\n\nexport const App: React.FC = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  useEffect(() => {\n    subscribeStateChange(dispatch);\n  }, []);\n\n  return (\n    <div className='App'>\n      <Auth dispatch={dispatch} user={state.user} />\n      {state.user.signIn && <Translator authToken={state.user.token} />}\n    </div>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}